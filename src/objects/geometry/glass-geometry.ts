import { BufferAttribute } from '../base/buffer-attribute';
import {
  BufferGeometry,
  BufferGeometrySerialized
} from '../base/buffer-geometry';

export interface GlassGeometryProps {}
export type GlassGeometrySerialized = BufferGeometrySerialized &
  GlassGeometryProps;

export class GlassGeometry extends BufferGeometry<GlassGeometrySerialized> {
  constructor() {
    const vertices = new Float32Array([
      -0.5, -1.2, 0.5, -0.5, -1.25, 0.5, 0.5, -1.25, 0.5, 0.5, -1.25, 0.5, 0.5,
      -1.2, 0.5, -0.5, -1.2, 0.5, 0.5, -1.2, 0.5, 0.5, -1.25, 0.5, 0.5, -1.25,
      0.45, 0.5, -1.25, 0.45, 0.5, -1.2, 0.45, 0.5, -1.2, 0.5, -0.5, -1.2, 0.45,
      -0.5, -1.25, 0.45, -0.5, -1.25, 0.5, -0.5, -1.25, 0.5, -0.5, -1.2, 0.5,
      -0.5, -1.2, 0.45, -0.5, -1.2, 0.45, -0.5, -1.2, 0.5, 0.5, -1.2, 0.5, 0.5,
      -1.2, 0.5, 0.5, -1.2, 0.45, -0.5, -1.2, 0.45, 0.5, -1.25, 0.45, 0.5,
      -1.25, 0.5, -0.5, -1.25, 0.5, -0.5, -1.25, 0.5, -0.5, -1.25, 0.45, 0.5,
      -1.25, 0.45, 0.5, -1.2, 0.45, 0.5, -1.25, 0.45, -0.5, -1.25, 0.45, -0.5,
      -1.25, 0.45, -0.5, -1.2, 0.45, 0.5, -1.2, 0.45,
      //
      -0.5, -1.2, -0.5, -0.5, -1.25, -0.5, 0.5, -1.25, -0.5, 0.5, -1.25, -0.5,
      0.5, -1.2, -0.5, -0.5, -1.2, -0.5, 0.5, -1.2, -0.5, 0.5, -1.25, -0.5, 0.5,
      -1.25, -0.45, 0.5, -1.25, -0.45, 0.5, -1.2, -0.45, 0.5, -1.2, -0.5, -0.5,
      -1.2, -0.45, -0.5, -1.25, -0.45, -0.5, -1.25, -0.5, -0.5, -1.25, -0.5,
      -0.5, -1.2, -0.5, -0.5, -1.2, -0.45, -0.5, -1.2, -0.45, -0.5, -1.2, -0.5,
      0.5, -1.2, -0.5, 0.5, -1.2, -0.5, 0.5, -1.2, -0.45, -0.5, -1.2, -0.45,
      0.5, -1.25, -0.45, 0.5, -1.25, -0.5, -0.5, -1.25, -0.5, -0.5, -1.25, -0.5,
      -0.5, -1.25, -0.45, 0.5, -1.25, -0.45, 0.5, -1.2, -0.45, 0.5, -1.25,
      -0.45, -0.5, -1.25, -0.45, -0.5, -1.25, -0.45, -0.5, -1.2, -0.45, 0.5,
      -1.2, -0.45,
      //
      0.5, -1.2, -0.5, 0.5, -1.25, -0.5, 0.5, -1.25, 0.5, 0.5, -1.25, 0.5, 0.5,
      -1.2, 0.5, 0.5, -1.2, -0.5, 0.5, -1.2, 0.5, 0.5, -1.25, 0.5, 0.45, -1.25,
      0.5, 0.45, -1.25, 0.5, 0.45, -1.2, 0.5, 0.5, -1.2, 0.5, 0.45, -1.2, -0.5,
      0.45, -1.25, -0.5, 0.5, -1.25, -0.5, 0.5, -1.25, -0.5, 0.5, -1.2, -0.5,
      0.45, -1.2, -0.5, 0.45, -1.2, -0.5, 0.5, -1.2, -0.5, 0.5, -1.2, 0.5, 0.5,
      -1.2, 0.5, 0.45, -1.2, 0.5, 0.45, -1.2, -0.5, 0.45, -1.25, 0.5, 0.5,
      -1.25, 0.5, 0.5, -1.25, -0.5, 0.5, -1.25, -0.5, 0.45, -1.25, -0.5, 0.45,
      -1.25, 0.5, 0.45, -1.2, 0.5, 0.45, -1.25, 0.5, 0.45, -1.25, -0.5, 0.45,
      -1.25, -0.5, 0.45, -1.2, -0.5, 0.45, -1.2, 0.5,
      //
      -0.5, -1.2, -0.5, -0.5, -1.25, -0.5, -0.5, -1.25, 0.5, -0.5, -1.25, 0.5,
      -0.5, -1.2, 0.5, -0.5, -1.2, -0.5, -0.5, -1.2, 0.5, -0.5, -1.25, 0.5,
      -0.45, -1.25, 0.5, -0.45, -1.25, 0.5, -0.45, -1.2, 0.5, -0.5, -1.2, 0.5,
      -0.45, -1.2, -0.5, -0.45, -1.25, -0.5, -0.5, -1.25, -0.5, -0.5, -1.25,
      -0.5, -0.5, -1.2, -0.5, -0.45, -1.2, -0.5, -0.45, -1.2, -0.5, -0.5, -1.2,
      -0.5, -0.5, -1.2, 0.5, -0.5, -1.2, 0.5, -0.45, -1.2, 0.5, -0.45, -1.2,
      -0.5, -0.45, -1.25, 0.5, -0.5, -1.25, 0.5, -0.5, -1.25, -0.5, -0.5, -1.25,
      -0.5, -0.45, -1.25, -0.5, -0.45, -1.25, 0.5, -0.45, -1.2, 0.5, -0.45,
      -1.25, 0.5, -0.45, -1.25, -0.5, -0.45, -1.25, -0.5, -0.45, -1.2, -0.5,
      -0.45, -1.2, 0.5,
      //
      -0.5, -0.95, 0.5, -0.5, -1, 0.5, 0.5, -1, 0.5, 0.5, -1, 0.5, 0.5, -0.95,
      0.5, -0.5, -0.95, 0.5, 0.5, -0.95, 0.5, 0.5, -1, 0.5, 0.5, -1, 0.45, 0.5,
      -1, 0.45, 0.5, -0.95, 0.45, 0.5, -0.95, 0.5, -0.5, -0.95, 0.45, -0.5, -1,
      0.45, -0.5, -1, 0.5, -0.5, -1, 0.5, -0.5, -0.95, 0.5, -0.5, -0.95, 0.45,
      -0.5, -0.95, 0.45, -0.5, -0.95, 0.5, 0.5, -0.95, 0.5, 0.5, -0.95, 0.5,
      0.5, -0.95, 0.45, -0.5, -0.95, 0.45, 0.5, -1, 0.45, 0.5, -1, 0.5, -0.5,
      -1, 0.5, -0.5, -1, 0.5, -0.5, -1, 0.45, 0.5, -1, 0.45, 0.5, -0.95, 0.45,
      0.5, -1, 0.45, -0.5, -1, 0.45, -0.5, -1, 0.45, -0.5, -0.95, 0.45, 0.5,
      -0.95, 0.45, -0.5, -0.95, -0.5, -0.5, -1, -0.5, 0.5, -1, -0.5, 0.5, -1,
      -0.5, 0.5, -0.95, -0.5, -0.5, -0.95, -0.5, 0.5, -0.95, -0.5, 0.5, -1,
      -0.5, 0.5, -1, -0.45, 0.5, -1, -0.45, 0.5, -0.95, -0.45, 0.5, -0.95, -0.5,
      -0.5, -0.95, -0.45, -0.5, -1, -0.45, -0.5, -1, -0.5, -0.5, -1, -0.5, -0.5,
      -0.95, -0.5, -0.5, -0.95, -0.45, -0.5, -0.95, -0.45, -0.5, -0.95, -0.5,
      0.5, -0.95, -0.5, 0.5, -0.95, -0.5, 0.5, -0.95, -0.45, -0.5, -0.95, -0.45,
      0.5, -1, -0.45, 0.5, -1, -0.5, -0.5, -1, -0.5, -0.5, -1, -0.5, -0.5, -1,
      -0.45, 0.5, -1, -0.45, 0.5, -0.95, -0.45, 0.5, -1, -0.45, -0.5, -1, -0.45,
      -0.5, -1, -0.45, -0.5, -0.95, -0.45, 0.5, -0.95, -0.45, 0.5, -0.95, -0.5,
      0.5, -1, -0.5, 0.5, -1, 0.5, 0.5, -1, 0.5, 0.5, -0.95, 0.5, 0.5, -0.95,
      -0.5, 0.5, -0.95, 0.5, 0.5, -1, 0.5, 0.45, -1, 0.5, 0.45, -1, 0.5, 0.45,
      -0.95, 0.5, 0.5, -0.95, 0.5, 0.45, -0.95, -0.5, 0.45, -1, -0.5, 0.5, -1,
      -0.5, 0.5, -1, -0.5, 0.5, -0.95, -0.5, 0.45, -0.95, -0.5, 0.45, -0.95,
      -0.5, 0.5, -0.95, -0.5, 0.5, -0.95, 0.5, 0.5, -0.95, 0.5, 0.45, -0.95,
      0.5, 0.45, -0.95, -0.5, 0.45, -1, 0.5, 0.5, -1, 0.5, 0.5, -1, -0.5, 0.5,
      -1, -0.5, 0.45, -1, -0.5, 0.45, -1, 0.5, 0.45, -0.95, 0.5, 0.45, -1, 0.5,
      0.45, -1, -0.5, 0.45, -1, -0.5, 0.45, -0.95, -0.5, 0.45, -0.95, 0.5, -0.5,
      -0.95, -0.5, -0.5, -1, -0.5, -0.5, -1, 0.5, -0.5, -1, 0.5, -0.5, -0.95,
      0.5, -0.5, -0.95, -0.5, -0.5, -0.95, 0.5, -0.5, -1, 0.5, -0.45, -1, 0.5,
      -0.45, -1, 0.5, -0.45, -0.95, 0.5, -0.5, -0.95, 0.5, -0.45, -0.95, -0.5,
      -0.45, -1, -0.5, -0.5, -1, -0.5, -0.5, -1, -0.5, -0.5, -0.95, -0.5, -0.45,
      -0.95, -0.5, -0.45, -0.95, -0.5, -0.5, -0.95, -0.5, -0.5, -0.95, 0.5,
      -0.5, -0.95, 0.5, -0.45, -0.95, 0.5, -0.45, -0.95, -0.5, -0.45, -1, 0.5,
      -0.5, -1, 0.5, -0.5, -1, -0.5, -0.5, -1, -0.5, -0.45, -1, -0.5, -0.45, -1,
      0.5, -0.45, -0.95, 0.5, -0.45, -1, 0.5, -0.45, -1, -0.5, -0.45, -1, -0.5,
      -0.45, -0.95, -0.5, -0.45, -0.95, 0.5,
      //
      -0.5, 1, 0.5, -0.5, 0.95, 0.5, 0.5, 0.95, 0.5, 0.5, 0.95, 0.5, 0.5, 1,
      0.5, -0.5, 1, 0.5, 0.5, 1, 0.5, 0.5, 0.95, 0.5, 0.5, 0.95, 0.45, 0.5,
      0.95, 0.45, 0.5, 1, 0.45, 0.5, 1, 0.5, -0.5, 1, 0.45, -0.5, 0.95, 0.45,
      -0.5, 0.95, 0.5, -0.5, 0.95, 0.5, -0.5, 1, 0.5, -0.5, 1, 0.45, -0.5, 1,
      0.45, -0.5, 1, 0.5, 0.5, 1, 0.5, 0.5, 1, 0.5, 0.5, 1, 0.45, -0.5, 1, 0.45,
      0.5, 0.95, 0.45, 0.5, 0.95, 0.5, -0.5, 0.95, 0.5, -0.5, 0.95, 0.5, -0.5,
      0.95, 0.45, 0.5, 0.95, 0.45, 0.5, 1, 0.45, 0.5, 0.95, 0.45, -0.5, 0.95,
      0.45, -0.5, 0.95, 0.45, -0.5, 1, 0.45, 0.5, 1, 0.45, -0.5, 1, -0.5, -0.5,
      0.95, -0.5, 0.5, 0.95, -0.5, 0.5, 0.95, -0.5, 0.5, 1, -0.5, -0.5, 1, -0.5,
      0.5, 1, -0.5, 0.5, 0.95, -0.5, 0.5, 0.95, -0.45, 0.5, 0.95, -0.45, 0.5, 1,
      -0.45, 0.5, 1, -0.5, -0.5, 1, -0.45, -0.5, 0.95, -0.45, -0.5, 0.95, -0.5,
      -0.5, 0.95, -0.5, -0.5, 1, -0.5, -0.5, 1, -0.45, -0.5, 1, -0.45, -0.5, 1,
      -0.5, 0.5, 1, -0.5, 0.5, 1, -0.5, 0.5, 1, -0.45, -0.5, 1, -0.45, 0.5,
      0.95, -0.45, 0.5, 0.95, -0.5, -0.5, 0.95, -0.5, -0.5, 0.95, -0.5, -0.5,
      0.95, -0.45, 0.5, 0.95, -0.45, 0.5, 1, -0.45, 0.5, 0.95, -0.45, -0.5,
      0.95, -0.45, -0.5, 0.95, -0.45, -0.5, 1, -0.45, 0.5, 1, -0.45, 0.5, 1,
      -0.5, 0.5, 0.95, -0.5, 0.5, 0.95, 0.5, 0.5, 0.95, 0.5, 0.5, 1, 0.5, 0.5,
      1, -0.5, 0.5, 1, 0.5, 0.5, 0.95, 0.5, 0.45, 0.95, 0.5, 0.45, 0.95, 0.5,
      0.45, 1, 0.5, 0.5, 1, 0.5, 0.45, 1, -0.5, 0.45, 0.95, -0.5, 0.5, 0.95,
      -0.5, 0.5, 0.95, -0.5, 0.5, 1, -0.5, 0.45, 1, -0.5, 0.45, 1, -0.5, 0.5, 1,
      -0.5, 0.5, 1, 0.5, 0.5, 1, 0.5, 0.45, 1, 0.5, 0.45, 1, -0.5, 0.45, 0.95,
      0.5, 0.5, 0.95, 0.5, 0.5, 0.95, -0.5, 0.5, 0.95, -0.5, 0.45, 0.95, -0.5,
      0.45, 0.95, 0.5, 0.45, 1, 0.5, 0.45, 0.95, 0.5, 0.45, 0.95, -0.5, 0.45,
      0.95, -0.5, 0.45, 1, -0.5, 0.45, 1, 0.5, -0.5, 1, -0.5, -0.5, 0.95, -0.5,
      -0.5, 0.95, 0.5, -0.5, 0.95, 0.5, -0.5, 1, 0.5, -0.5, 1, -0.5, -0.5, 1,
      0.5, -0.5, 0.95, 0.5, -0.45, 0.95, 0.5, -0.45, 0.95, 0.5, -0.45, 1, 0.5,
      -0.5, 1, 0.5, -0.45, 1, -0.5, -0.45, 0.95, -0.5, -0.5, 0.95, -0.5, -0.5,
      0.95, -0.5, -0.5, 1, -0.5, -0.45, 1, -0.5, -0.45, 1, -0.5, -0.5, 1, -0.5,
      -0.5, 1, 0.5, -0.5, 1, 0.5, -0.45, 1, 0.5, -0.45, 1, -0.5, -0.45, 0.95,
      0.5, -0.5, 0.95, 0.5, -0.5, 0.95, -0.5, -0.5, 0.95, -0.5, -0.45, 0.95,
      -0.5, -0.45, 0.95, 0.5, -0.45, 1, 0.5, -0.45, 0.95, 0.5, -0.45, 0.95,
      -0.5, -0.45, 0.95, -0.5, -0.45, 1, -0.5, -0.45, 1, 0.5,
      //
      -0.5, 1.25, 0.5, -0.5, 1.2, 0.5, 0.5, 1.2, 0.5, 0.5, 1.2, 0.5, 0.5, 1.25,
      0.5, -0.5, 1.25, 0.5, 0.5, 1.25, 0.5, 0.5, 1.2, 0.5, 0.5, 1.2, 0.45, 0.5,
      1.2, 0.45, 0.5, 1.25, 0.45, 0.5, 1.25, 0.5, -0.5, 1.25, 0.45, -0.5, 1.2,
      0.45, -0.5, 1.2, 0.5, -0.5, 1.2, 0.5, -0.5, 1.25, 0.5, -0.5, 1.25, 0.45,
      -0.5, 1.25, 0.45, -0.5, 1.25, 0.5, 0.5, 1.25, 0.5, 0.5, 1.25, 0.5, 0.5,
      1.25, 0.45, -0.5, 1.25, 0.45, 0.5, 1.2, 0.45, 0.5, 1.2, 0.5, -0.5, 1.2,
      0.5, -0.5, 1.2, 0.5, -0.5, 1.2, 0.45, 0.5, 1.2, 0.45, 0.5, 1.25, 0.45,
      0.5, 1.2, 0.45, -0.5, 1.2, 0.45, -0.5, 1.2, 0.45, -0.5, 1.25, 0.45, 0.5,
      1.25, 0.45, -0.5, 1.25, -0.5, -0.5, 1.2, -0.5, 0.5, 1.2, -0.5, 0.5, 1.2,
      -0.5, 0.5, 1.25, -0.5, -0.5, 1.25, -0.5, 0.5, 1.25, -0.5, 0.5, 1.2, -0.5,
      0.5, 1.2, -0.45, 0.5, 1.2, -0.45, 0.5, 1.25, -0.45, 0.5, 1.25, -0.5, -0.5,
      1.25, -0.45, -0.5, 1.2, -0.45, -0.5, 1.2, -0.5, -0.5, 1.2, -0.5, -0.5,
      1.25, -0.5, -0.5, 1.25, -0.45, -0.5, 1.25, -0.45, -0.5, 1.25, -0.5, 0.5,
      1.25, -0.5, 0.5, 1.25, -0.5, 0.5, 1.25, -0.45, -0.5, 1.25, -0.45, 0.5,
      1.2, -0.45, 0.5, 1.2, -0.5, -0.5, 1.2, -0.5, -0.5, 1.2, -0.5, -0.5, 1.2,
      -0.45, 0.5, 1.2, -0.45, 0.5, 1.25, -0.45, 0.5, 1.2, -0.45, -0.5, 1.2,
      -0.45, -0.5, 1.2, -0.45, -0.5, 1.25, -0.45, 0.5, 1.25, -0.45, 0.5, 1.25,
      -0.5, 0.5, 1.2, -0.5, 0.5, 1.2, 0.5, 0.5, 1.2, 0.5, 0.5, 1.25, 0.5, 0.5,
      1.25, -0.5, 0.5, 1.25, 0.5, 0.5, 1.2, 0.5, 0.45, 1.2, 0.5, 0.45, 1.2, 0.5,
      0.45, 1.25, 0.5, 0.5, 1.25, 0.5, 0.45, 1.25, -0.5, 0.45, 1.2, -0.5, 0.5,
      1.2, -0.5, 0.5, 1.2, -0.5, 0.5, 1.25, -0.5, 0.45, 1.25, -0.5, 0.45, 1.25,
      -0.5, 0.5, 1.25, -0.5, 0.5, 1.25, 0.5, 0.5, 1.25, 0.5, 0.45, 1.25, 0.5,
      0.45, 1.25, -0.5, 0.45, 1.2, 0.5, 0.5, 1.2, 0.5, 0.5, 1.2, -0.5, 0.5, 1.2,
      -0.5, 0.45, 1.2, -0.5, 0.45, 1.2, 0.5, 0.45, 1.25, 0.5, 0.45, 1.2, 0.5,
      0.45, 1.2, -0.5, 0.45, 1.2, -0.5, 0.45, 1.25, -0.5, 0.45, 1.25, 0.5, -0.5,
      1.25, -0.5, -0.5, 1.2, -0.5, -0.5, 1.2, 0.5, -0.5, 1.2, 0.5, -0.5, 1.25,
      0.5, -0.5, 1.25, -0.5, -0.5, 1.25, 0.5, -0.5, 1.2, 0.5, -0.45, 1.2, 0.5,
      -0.45, 1.2, 0.5, -0.45, 1.25, 0.5, -0.5, 1.25, 0.5, -0.45, 1.25, -0.5,
      -0.45, 1.2, -0.5, -0.5, 1.2, -0.5, -0.5, 1.2, -0.5, -0.5, 1.25, -0.5,
      -0.45, 1.25, -0.5, -0.45, 1.25, -0.5, -0.5, 1.25, -0.5, -0.5, 1.25, 0.5,
      -0.5, 1.25, 0.5, -0.45, 1.25, 0.5, -0.45, 1.25, -0.5, -0.45, 1.2, 0.5,
      -0.5, 1.2, 0.5, -0.5, 1.2, -0.5, -0.5, 1.2, -0.5, -0.45, 1.2, -0.5, -0.45,
      1.2, 0.5, -0.45, 1.25, 0.5, -0.45, 1.2, 0.5, -0.45, 1.2, -0.5, -0.45, 1.2,
      -0.5, -0.45, 1.25, -0.5, -0.45, 1.25, 0.5,
      //
      0.45, 1.25, 0.5, 0.45, -1.25, 0.5, 0.5, -1.25, 0.5, 0.5, -1.25, 0.5, 0.5,
      1.25, 0.5, 0.45, 1.25, 0.5, 0.5, 1.25, 0.5, 0.5, -1.25, 0.5, 0.5, -1.25,
      0.45, 0.5, -1.25, 0.45, 0.5, 1.25, 0.45, 0.5, 1.25, 0.5, 0.45, 1.25, 0.45,
      0.45, -1.25, 0.45, 0.45, -1.25, 0.5, 0.45, -1.25, 0.5, 0.45, 1.25, 0.5,
      0.45, 1.25, 0.45, 0.45, 1.25, 0.45, 0.45, 1.25, 0.5, 0.5, 1.25, 0.5, 0.5,
      1.25, 0.5, 0.5, 1.25, 0.45, 0.45, 1.25, 0.45, 0.5, -1.25, 0.45, 0.5,
      -1.25, 0.5, 0.45, -1.25, 0.5, 0.45, -1.25, 0.5, 0.45, -1.25, 0.45, 0.5,
      -1.25, 0.45, 0.5, 1.25, 0.45, 0.5, -1.25, 0.45, 0.45, -1.25, 0.45, 0.45,
      -1.25, 0.45, 0.45, 1.25, 0.45, 0.5, 1.25, 0.45, -0.45, 1.25, -0.5, -0.45,
      -1.25, -0.5, -0.5, -1.25, -0.5, -0.5, -1.25, -0.5, -0.5, 1.25, -0.5,
      -0.45, 1.25, -0.5, -0.5, 1.25, -0.5, -0.5, -1.25, -0.5, -0.5, -1.25,
      -0.45, -0.5, -1.25, -0.45, -0.5, 1.25, -0.45, -0.5, 1.25, -0.5, -0.45,
      1.25, -0.45, -0.45, -1.25, -0.45, -0.45, -1.25, -0.5, -0.45, -1.25, -0.5,
      -0.45, 1.25, -0.5, -0.45, 1.25, -0.45, -0.45, 1.25, -0.45, -0.45, 1.25,
      -0.5, -0.5, 1.25, -0.5, -0.5, 1.25, -0.5, -0.5, 1.25, -0.45, -0.45, 1.25,
      -0.45, -0.5, -1.25, -0.45, -0.5, -1.25, -0.5, -0.45, -1.25, -0.5, -0.45,
      -1.25, -0.5, -0.45, -1.25, -0.45, -0.5, -1.25, -0.45, -0.5, 1.25, -0.45,
      -0.5, -1.25, -0.45, -0.45, -1.25, -0.45, -0.45, -1.25, -0.45, -0.45, 1.25,
      -0.45, -0.5, 1.25, -0.45, 0.45, 1.25, -0.45, 0.45, -1.25, -0.45, 0.5,
      -1.25, -0.45, 0.5, -1.25, -0.45, 0.5, 1.25, -0.45, 0.45, 1.25, -0.45, 0.5,
      1.25, -0.45, 0.5, -1.25, -0.45, 0.5, -1.25, -0.5, 0.5, -1.25, -0.5, 0.5,
      1.25, -0.5, 0.5, 1.25, -0.45, 0.45, 1.25, -0.5, 0.45, -1.25, -0.5, 0.45,
      -1.25, -0.45, 0.45, -1.25, -0.45, 0.45, 1.25, -0.45, 0.45, 1.25, -0.5,
      0.45, 1.25, -0.5, 0.45, 1.25, -0.45, 0.5, 1.25, -0.45, 0.5, 1.25, -0.45,
      0.5, 1.25, -0.5, 0.45, 1.25, -0.5, 0.5, -1.25, -0.5, 0.5, -1.25, -0.45,
      0.45, -1.25, -0.45, 0.45, -1.25, -0.45, 0.45, -1.25, -0.5, 0.5, -1.25,
      -0.5, 0.5, 1.25, -0.5, 0.5, -1.25, -0.5, 0.45, -1.25, -0.5, 0.45, -1.25,
      -0.5, 0.45, 1.25, -0.5, 0.5, 1.25, -0.5, -0.45, 1.25, 0.45, -0.45, -1.25,
      0.45, -0.45, -1.25, 0.5, -0.45, -1.25, 0.5, -0.45, 1.25, 0.5, -0.45, 1.25,
      0.45, -0.45, 1.25, 0.5, -0.45, -1.25, 0.5, -0.5, -1.25, 0.5, -0.5, -1.25,
      0.5, -0.5, 1.25, 0.5, -0.45, 1.25, 0.5, -0.5, 1.25, 0.45, -0.5, -1.25,
      0.45, -0.45, -1.25, 0.45, -0.45, -1.25, 0.45, -0.45, 1.25, 0.45, -0.5,
      1.25, 0.45, -0.5, 1.25, 0.45, -0.45, 1.25, 0.45, -0.45, 1.25, 0.5, -0.45,
      1.25, 0.5, -0.5, 1.25, 0.5, -0.5, 1.25, 0.45, -0.5, -1.25, 0.5, -0.45,
      -1.25, 0.5, -0.45, -1.25, 0.45, -0.45, -1.25, 0.45, -0.5, -1.25, 0.45,
      -0.5, -1.25, 0.5, -0.5, 1.25, 0.5, -0.5, -1.25, 0.5, -0.5, -1.25, 0.45,
      -0.5, -1.25, 0.45, -0.5, 1.25, 0.45, -0.5, 1.25, 0.5
      //
    ]);

    super({
      position: new BufferAttribute(vertices, 3),
      texcoord: new BufferAttribute(new Float32Array(0), 2)
    });
  }

  public toJSON(withNodeAttributes: boolean = true): GlassGeometrySerialized {
    const data: GlassGeometrySerialized = {} as GlassGeometrySerialized;

    if (withNodeAttributes) {
      // @ts-ignore
      data.attributes = {};

      for (const key of Object.keys(this.attributes)) {
        const value = this.attributes[key];

        if (value) {
          if (value instanceof BufferAttribute) {
            data.attributes[key] = value.toJSON();
          } else {
            // @ts-ignore
            data.attributes[key] = value;
          }
        }
      }
    }

    return data;
  }

  public static fromJSON(data: GlassGeometryProps): GlassGeometry {
    return new GlassGeometry();
  }
}
